# ワークフローの名前
name: Build Thesis Document

# ワークフローが実行されるトリガーを指定
on:
  # mainブランチにプッシュされたときに実行
  push:
    branches:
      - main
      - master

  # 手動でも実行できるようにする
  workflow_dispatch:

# 実行されるジョブを定義
jobs:
  build:
    # ubuntuの最新版仮想環境で実行
    runs-on: ubuntu-latest

    # ジョブのステップを定義
    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 出力ディレクトリを作成
      - name: Create output directory
        run: mkdir -p output

      # 3. reference.docxが存在するかチェック（デバッグログ付き）
      - name: Check for reference.docx
        run: |
          echo "=== DEBUG: Checking for reference.docx ==="
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Checking for reference.docx..."
          if [ -f "reference.docx" ]; then
            echo "✅ reference.docx found!"
            echo "File size: $(ls -lh reference.docx | awk '{print $5}')"
            echo "File permissions: $(ls -l reference.docx | awk '{print $1}')"
            echo "Will use as template"
            echo "REFERENCE_DOC=--reference-doc=reference.docx" >> $GITHUB_ENV
          else
            echo "❌ reference.docx not found"
            echo "Available .docx files:"
            ls -la *.docx 2>/dev/null || echo "No .docx files found"
            echo "Using default template"
            echo "REFERENCE_DOC=" >> $GITHUB_ENV
          fi
          echo "REFERENCE_DOC environment variable set to: ${{ env.REFERENCE_DOC }}"
          echo "=== END DEBUG ==="

      # 4. Pandocコマンドの詳細ログを表示
      - name: Show Pandoc command details
        run: |
          echo "=== DEBUG: Pandoc Command Details ==="
          echo "REFERENCE_DOC: ${{ env.REFERENCE_DOC }}"
          echo "Full command will be:"
          echo "pandoc --defaults=defaults.yaml --citeproc --bibliography=references.bib ${{ env.REFERENCE_DOC }} -V toc-title=目次 -V lot-title=表目次 -V lof-title=図目次 --filter=pandoc-crossref --output=output/thesis.docx [chapter files]"
          echo ""
          echo "Checking input files:"
          for file in ./chapters/*.md; do
            if [ -f "$file" ]; then
              echo "✅ $file ($(ls -lh "$file" | awk '{print $5}'))"
            else
              echo "❌ $file (not found)"
            fi
          done
          echo "=== END DEBUG ==="

      # 5. 章ファイルを自動取得してPandocで変換
      - name: Get chapter files and convert with Pandoc
        run: |
          echo "=== DEBUG: Getting chapter files ==="
          
          # chaptersディレクトリの.mdファイルを番号順にソートして取得
          CHAPTER_FILES=$(find ./chapters -name "*.md" | sort)
          
          echo "Found chapter files:"
          echo "$CHAPTER_FILES"
          
          # Pandocコマンドを構築
          PANDOC_CMD="pandoc --defaults=defaults.yaml --citeproc --bibliography=references.bib $REFERENCE_DOC -V toc-title=目次 -V lot-title=表目次 -V lof-title=図目次 --filter=pandoc-crossref --output=output/thesis.docx"
          
          # 章ファイルを追加
          for file in $CHAPTER_FILES; do
            PANDOC_CMD="$PANDOC_CMD $file"
          done
          
          echo "=== DEBUG: Full Pandoc command ==="
          echo "$PANDOC_CMD"
          
          # Pandocコマンドを実行
          eval $PANDOC_CMD
          
          echo "=== END DEBUG ==="

      # 6. 変換結果の確認
      - name: Verify conversion results
        run: |
          echo "=== DEBUG: Conversion Results ==="
          echo "Output directory contents:"
          ls -la output/
          echo ""
          if [ -f "output/thesis.docx" ]; then
            echo "✅ thesis.docx created successfully!"
            echo "File size: $(ls -lh output/thesis.docx | awk '{print $5}')"
            echo "File permissions: $(ls -l output/thesis.docx | awk '{print $1}')"
          else
            echo "❌ thesis.docx not found in output directory"
          fi
          echo "=== END DEBUG ==="

      # 7. 生成されたWordファイルをアーティファクトとしてアップロードする
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # アーティファクトの名前
          name: thesis-document
          # アップロードするファイルのパス
          path: output/
